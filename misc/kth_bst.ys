.pos 0
main:
	irmovq stack, %rsp
	irmovq root, %rdi
	irmovq k, %rsi
	irmovq $0, %rbx
	irmovq $1, %rcx
	irmovq $8, %r8
	call kth_bst
	xorq %rbx, %rbx
	xorq %rcx, %rcx
	xorq %r8, %r8
	xorq %r9, %r9
	rmmovq %rbx, -8(%rsp)
	halt

kth_bst:
	andq %rdi, %rdi
	je empty
	rmmovq %rdi, -8(%rsp)
	subq %r8, %rsp	
	mrmovq 8(%rdi), %rdi
	call kth_bst
	rmmovq %rbx, -8(%rsp)
	addq %r8, %rsp
	mrmovq -8(%rsp), %rdi
	mrmovq (%rsi), %r9 # *k
	andq %r9, %r9
	je return # candidate
	subq %rcx, %r9
	rmmovq %r9, (%rsi)
	andq %r9, %r9
	jne right_tree
	mrmovq (%rdi), %rax
	jmp return
right_tree:
	rmmovq %rdi, -8(%rsp)
	subq %r8, %rsp
	mrmovq 16(%rdi), %rdi
	call kth_bst
	rmmovq %rbx, -8(%rsp)
	addq %r8, %rsp
	mrmovq -8(%rsp), %rdi
	jmp return
empty:
	irmovq $-1, %rax
return:
	rmmovq %rbx, -8(%rsp)
	ret



.pos 0x200
root:
.quad 17
.quad node6
.quad node24
node6:
.quad 6
.quad node4
.quad node11
node4:
.quad 4
.quad node3
.quad node5
node3:
.quad 3
.quad 0
.quad 0
node5:
.quad 5
.quad 0 # Remember that 0 is null.
.quad 0
node11:
.quad 11
.quad node8
.quad 0
node8:
.quad 8
.quad 0
.quad 0
node24:
.quad 24
.quad node19
.quad node40
node19:
.quad 19
.quad 0
.quad 0
node40:
.quad 40
.quad 0
.quad node52
node52:
.quad 52
.quad 0
.quad 0
k:
.quad 8

.pos 0x800
stack:
