.pos 0
main:
	irmovq stack, %rsp
	irmovq ele0, %rdi
	irmovq array, %rsi
	irmovq $56, %rdx
	call insert_ll
	rmmovq %r12, -8(%rsp)
	halt

insert_ll:
	rmmovq %rdx, (%rsi)
	rrmovq %rdi, %rbp
	andq %rdi, %rdi
	jne test
	mrmovq (%rdi), %r8
	subq %rdx, %r8
	jle test
	rmmovq %rdi, 8(%rsi)
	rrmovq %rsi, %rax
	xorq %r8, %r8
	xorq %rbp, %rbp
	ret
loop:
	mrmovq 8(%rbp), %rbp
test:	
	mrmovq 8(%rbp), %r12
	andq %r12, %r12
	je else
	mrmovq (%r12), %r10
	subq %rdx, %r10
	jl loop
else:
	rmmovq %r12, 8(%rsi)
	rmmovq %rsi, 8(%rbp)
	xorq %rbp, %rbp
	xorq %r12, %r12
	xorq %r10, %r10
	rrmovq %rdi, %rax
	ret


.pos 0x200
ele0:
.quad 0x0005
.quad ele1
ele1:
.quad 0x000c
.quad ele2
ele2:
.quad 0x0010
.quad ele3
ele3:
.quad 0x001a
.quad ele4
ele4:
.quad 0x0030
.quad ele5
ele5:
.quad 0x0045
.quad ele6
ele6:
.quad 0x005e
.quad 0 # NULL


.pos 0x400
array:
	.quad 0
	.quad 0

.pos 0x800
stack:
